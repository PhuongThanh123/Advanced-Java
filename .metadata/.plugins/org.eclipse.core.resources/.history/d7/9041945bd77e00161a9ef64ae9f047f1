package handlingStream;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.DoubleSummaryStatistics;
import java.util.List;

import org.junit.Test;

/**
 * @author: Le Phuong Thanh
 * @version: 1.0
 * @Date: 19/09/2016
 * @Desciptione: Class Test Lowest Salary Employee
 */
public class TestLowestSalaryEmloyee {
	
	static List<Emloyee> listEmloyee = new ArrayList<Emloyee>();
	DoubleSummaryStatistics statisticsEmloyee ;
	
	@Test
	public void testLowestSalaryEmloyee1() {
		double ex =2000000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 2000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee2() {
		double ex =1000000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 2000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 1000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee3() {
		double ex =200000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 200000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee4() {
		double ex =2100000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 2100000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee5() {
		double ex =34000000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 8000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee6() {
		double ex =2900000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 8000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertNotEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee7() {
		double ex =9000000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 2000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertNotEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee8() {
		double ex =6700000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 2000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertNotEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee9() {
		double ex =200000;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 2000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertNotEquals(ex, ac,0.01);
	}
	@Test
	public void testLowestSalaryEmloyee10() {
		double ex =0;
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Truong Ngoc Tinh Anh", 24, 2000000));
		listEmloyee.add(new Emloyee("Truong Thi Thanh Thao", 23, 6000000));
		listEmloyee.add(new Emloyee("Bui Thi Thuy Quynh", 26, 7000000));
		listEmloyee.add(new Emloyee("Le Minh Tuan Hoa", 21, 3000000));
		listEmloyee.add(new Emloyee("Phan Thi Kim Hien", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Thi Lan Phuong", 28, 5000000));
		listEmloyee.add(new Emloyee("Le Anh Minh Nguyen", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Le Van Nhi", 20, 2000000));
		listEmloyee.add(new Emloyee("Tran Anh Ngoc Tu", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Ngoc Quoc Huy", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Tien Anh Minh", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Le Cong Danh", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van Minh Minh", 24, 10000000));
		listEmloyee.add(new Emloyee("Le Thieng Bao Anh", 28, 3400000));
		
		statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		
		double ac=MainClass.getSalaryLowest(listEmloyee, statisticsEmloyee);
		assertNotEquals(ex, ac,0.01);
	}

}
