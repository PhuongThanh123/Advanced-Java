package workWitXML;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * @author: Le Phuong Thanh
 * @version: 1.0
 * @Date: 19/09/2016
 * @Desciptione: Class controller CD
 */
public class CDController {
	Database db = new Database();
	private List<CD> listCD = new ArrayList<CD>();
	private CD cd = new CD();
	private static List<CD> listReadFile = new ArrayList<CD>();

	public List<CD> getListCD() {
		return listCD;
	}

	public void setListCD(List<CD> listCD) {
		this.listCD = listCD;
	}

	public CDController(List<CD> listCD) {
		super();
		this.listCD = listCD;
	}

	public CDController() {
		super();
	}

	/**
	 * this is method get all data of CD from sql cdstore
	 * 
	 * @return list CD
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public List<CD> getAllCD() throws ClassNotFoundException, SQLException {
		listCD = new ArrayList<CD>();

		try (Connection conn = db.connect()) {
			Statement statement = conn.createStatement();
			String sql = "Select * from cd";

			ResultSet resultSet = statement.executeQuery(sql);
			while (resultSet.next()) {
				cd = new CD();
				cd.setId(resultSet.getInt("id"));
				cd.setName(resultSet.getString("name"));
				cd.setSinger(resultSet.getString("singer"));
				cd.setNumbersongs(resultSet.getInt("numbersongs"));
				cd.setPrice(resultSet.getDouble("price"));

				listCD.add(cd);
			}

		}
		return listCD;
	}

	/**
	 * this is method read CD from XML
	 * 
	 * @param node
	 * @return CD
	 */
	public CD readCD(Node node) {
		CD cd = new CD();
		if (node.getNodeType() == Node.ELEMENT_NODE) {
			Element element = (Element) node;
			cd.setId(Integer.parseInt(element.getElementsByTagName("id")
					.item(0).getChildNodes().item(0).getNodeValue()));
			cd.setName(element.getElementsByTagName("name").item(0)
					.getChildNodes().item(0).getNodeValue());
			cd.setSinger(element.getElementsByTagName("singer").item(0)
					.getChildNodes().item(0).getNodeValue());
			cd.setNumbersongs(Integer.parseInt(element
					.getElementsByTagName("numbersongs").item(0)
					.getChildNodes().item(0).getNodeValue()));

			cd.setPrice(Double.parseDouble(element
					.getElementsByTagName("price").item(0).getChildNodes()
					.item(0).getNodeValue()));

		}
		return cd;
	}

	/**
	 * this is method read FileXML
	 * 
	 * @param filePath
	 * @return String
	 * @throws FileNotFoundException
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	public String viewFile(String filePath) throws FileNotFoundException,
			ParserConfigurationException, SAXException, IOException {

		listReadFile = new ArrayList<CD>();
		// get Dom
		Document doc = getDoc(filePath);
		Element rootElement = doc.getDocumentElement();
		NodeList nodeList = rootElement.getElementsByTagName("CD");
		for (int i = 0; i < nodeList.getLength(); i++) {
			listReadFile.add(readCD(nodeList.item(i)));
		}
		String s = "==================List XML ====================\n";
		s += "Id\t\tName \t\t\t Singer \t NumberSongs \t\tprice\n";
		for (int i = 0; i < listReadFile.size(); i++) {
			s += listReadFile.get(i).toString();
		}
		return s;

	}

	/**
	 * this is method get document from file XML
	 * 
	 * @param filePath
	 * @return document
	 * @throws ParserConfigurationException
	 * @throws FileNotFoundException
	 * @throws SAXException
	 * @throws IOException
	 */
	public Document getDoc(String filePath)
			throws ParserConfigurationException, FileNotFoundException,
			SAXException, IOException {
		// Create Doc

		File xmlFile = new File(filePath);
		DocumentBuilderFactory docFactory = DocumentBuilderFactory
				.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

		// root element
		Document doc = docBuilder.newDocument();
		Element rootElement;

		// create Doc form stream
		if (xmlFile.isFile()) {
			doc = docBuilder.parse(new FileInputStream(xmlFile));
			doc.getDocumentElement().normalize();

		} else {
			rootElement = doc.createElement("store");// create root
			doc.appendChild(rootElement);

		}

		return doc;
	}

	/**
	 * this is method write Document into XML
	 * 
	 * @param filePath
	 * @throws FileNotFoundException
	 * @throws SAXException
	 * @throws IOException
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public void textTransfomer(String filePath) throws FileNotFoundException,
			SAXException, IOException, ClassNotFoundException, SQLException {

		try {

			File xmlFile = new File(filePath);

			Document doc = getDoc(filePath);
			Element rootElement = doc.getDocumentElement();

			// Remove all node in XML file
			while (rootElement.hasChildNodes())
				rootElement.removeChild(rootElement.getFirstChild());

			listReadFile = getAllCD();
			for (CD cd : listReadFile) {

				Element CD = doc.createElement("CD");
				rootElement.appendChild(CD);

				// name element
				Element id = doc.createElement("id");
				id.appendChild(doc.createTextNode(String.valueOf(cd.getId())));
				CD.appendChild(id);

				// name element
				Element name = doc.createElement("name");
				name.appendChild(doc.createTextNode(cd.getName()));
				CD.appendChild(name);

				// singer element
				Element singer = doc.createElement("singer");
				singer.appendChild(doc.createTextNode(cd.getSinger()));
				CD.appendChild(singer);

				// numbersongs element
				Element numbersongs = doc.createElement("numbersongs");
				numbersongs.appendChild(doc.createTextNode(String.valueOf(cd
						.getNumbersongs())));
				CD.appendChild(numbersongs);

				// singer element
				Element price = doc.createElement("price");
				price.appendChild(doc.createTextNode(String.valueOf(cd
						.getPrice())));
				CD.appendChild(price);
			}

			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory
					.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.setOutputProperty(OutputKeys.METHOD, "xml");
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			transformer.setOutputProperty(
					"{http://xml.apache.org/xslt}indent-amount", "4");
			DOMSource source = new DOMSource(doc);

			StreamResult result = new StreamResult(xmlFile);

			transformer.transform(source, result);
			System.out.println("This is success!");

		} catch (ParserConfigurationException | TransformerException
				| NullPointerException e) {
			System.out.println("Error: " + e.getMessage());
		}
	}

	@Override
	public String toString() {
		try {
			listCD = getAllCD();
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		String s = "==================List====================\n";
		s += "Id\t\tName \t\t\t Singer \t NumberSongs \t\tprice\n";
		for (int i = 0; i < listCD.size(); i++) {
			s += listCD.get(i).toString();
		}
		return s;
	}

}
