package handlingStream;

import java.util.ArrayList;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.stream.Collectors;

public class MainClass {
	static List<Emloyee> listEmloyee = new ArrayList<Emloyee>();

	public static void main(String[] args) {

		listEmloyee = createList();

		toString(listEmloyee);
		System.out.println("Total emloyee > 3000000: "
				+ countSalary3000000(listEmloyee));
		
		emloyeeIsAnh(listEmloyee);
		
		DoubleSummaryStatistics statisticsEmloyee = listEmloyee.stream()
				.mapToDouble((e) -> e.getSalary()).summaryStatistics();
		System.out.println("Highest salary of emloyee in List: "
				+ getSalaryHighest(listEmloyee, statisticsEmloyee));
		System.out.println("Lowest salary of emloyee in List: "
				+ getSalaryLowest(listEmloyee, statisticsEmloyee));
		System.out.println("Average of all Avg salary of emloyee: "
				+ getSalaryAvg(listEmloyee, statisticsEmloyee));

	}

	public static List<Emloyee> createList() {
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee = new ArrayList<Emloyee>();
		listEmloyee.add(new Emloyee("Nguyen Van A", 24, 2000000));
		listEmloyee.add(new Emloyee("Nguyen Van B", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Van C", 26, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Van E", 21, 3000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 24, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 28, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 29, 4000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 20, 2000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 22, 5000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 23, 6000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 21, 7000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 24, 8000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 24, 10000000));
		listEmloyee.add(new Emloyee("Nguyen Van A", 28, 3400000));
		return listEmloyee;

	}

	public static void toString(List<Emloyee> listEmloyee) {

		listEmloyee.stream().forEach(System.out::print);
	}

	public static long countSalary3000000(List<Emloyee> listEmloyee) {
		listEmloyee = createList();
		long count = listEmloyee.stream().filter(e -> e.getSalary() > 3000000)
				.count();
		return count;
	}

	public static void emloyeeIsAnh(List<Emloyee> listEmloyee) {
		
		List<Emloyee> listName = listEmloyee.stream()
				.filter(e -> e.getName().startsWith("A"))
				.collect(Collectors.toList());
		listName.forEach(System.out::print);
		
		listName.stream().forEach(System.out::print);
	}

	public static double getSalaryHighest(List<Emloyee> listEmloyee,
			DoubleSummaryStatistics statisticsEmloyee) {

		double maxSalary = statisticsEmloyee.getMax();
		return maxSalary;

	}

	public static double getSalaryLowest(List<Emloyee> listEmloyee,
			DoubleSummaryStatistics statisticsEmloyee) {

		double minSalary = statisticsEmloyee.getMin();

		return minSalary;

	}

	public static double getSalaryAvg(List<Emloyee> listEmloyee,
			DoubleSummaryStatistics statisticsEmloyee) {

		double maxSlary = statisticsEmloyee.getAverage();

		return maxSlary;
	}

}
